Структура комманды:
	1. метка
	2. код операции
	3. операнды
	4. комментарии

tasm /z(строки с ошибками)i(включить в файл отладачную информацию)
tlink /v(включить в файл информацию от отладчика)

Директивы:
	1. директивы определения данных
		db - define byte (может быть сделано в любом сегменте)
		dw - define word
		dd - define double word
		DQ - define quadro word
		DT - define ten bytes
		
		PTR - для опредения размера операнда (jmp WORD ptr [bx])
		OFFSET - загрузка смещение ячейки (mov ax, offset A)
		EQU - назначение синонима, можно подменять целые команды (Variable EQY)
		DUP - дубликация (инициализация массива)
		LABEL - метка
		ALIGN - выравнивает команду, по номеру (ALIGN number)
		EVEN - выравнивает следующую команду по четному адресу
		org - на сколько байт сдвинуть программу от начала сегмента кода
		
		DOSSEG - выстраивает сегменты в соотвествие с DOS (сначала код)
		STRUCT - определить структура данных (Struct ends)
	
	2. Директивы определния сегментов
		SEGMENT - определить сегмент (name SEGMENT ... name ENDS)
		end name - name - точка входу в программу. Также закрывает последний сегмент
		ASSUME - сказать какой сегмент сейчас будет активный (ASSUME seg_reg: name)
		.code - начало сегмента кода и конец прошлого сегмента
		.stack size - сегмент стека и конец прошлого сегмента
		
		.data - сегмент данных и конец прошлого сегмента (.model помещает в DGROUP)
		.data? - начинает неинициализируемый сегмент данных (.model помещает в DGROUP)
		.const - сегмент с именем const, содержит констанные данные (.model помещает в DGROUP)
		
		.fardata name - начинает сегмент дальних данных (не комбинируются с данными аналогичных сегментов)
		.fardata? name - начинает сегмент неинициализируемых данных (не комбинируются с данными аналогичных сегментов)
		
	3. Директивы группировки
		Set_data GROUP Set_data_1, Set_data_2 - группирует сегменты в один физический
	
	4. Директивы поддержки больших программ
		INCLUDE file_name - возможность подключение других программ
		EXTRN - определение внешних переменных и меток
		PUBLIC - определяет переменные или метки как глобальные
	
	5. Директивы процессора
		.номер процессора - какой процессор применять
	
	6. Инициалицая модели памяти
		.model memorymodel
		@code
		@data
		@fardata
		@stack
		
		.startup - инициализирует сегментные регистры
		
	7. Определния процедур
		name PROC - инициализирует процедуру
		name ENDP - окончание процедуры
		USES - что занести в стек перед началом процедуры
		LOCAL - имена, которые доступны в процедуре
	
	8. macro
		имя MACRO [параметр]
		Пример:
		.code
		name macro sreg,reg,addr
		mov reg,addr
		mov sreg,reg
		endm
		
		start:
		name ds,di,var
		
		rept - повторяет блок между этой директивой и endm
		irp (параметр, аргумент) - rept со строковой подстановкой
		irp reg,ax,bx
		push reg
		endm - сначала запушится ax, потом bx
