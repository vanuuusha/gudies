процесс - запущенная программа 
имеют большую безопастность, однако более дорогостоящие
внутри python программы нельзя выполнять более чем один поток за раз, но процессов много
потоки(тред) - делят одно адресное пространство (создается процессом)
многопоточность(concurrency) - последовательное быстрое переключение задач
параллелизм - много ядер в многопоточных режимах

логические ядра = количество физических ядер * число потоков на ядро

Типы многозадачности:
Кооперативная многозадность - задача сама решает, когда передать управление планировщику задач
Вытесняющая многозадачность - планировщик сам решает, когда передать воркеру другую задачу

все процессы кем-то попрождены(кроме init), путем полного копирования (fork(2)). 
Копирование ресурсов происходит через CON(Copy on Write)

состояния:
runable(R) - исполняется или в очереди
uninterruptible sleep(D) - ожидает ввода/инпута
sleep(S) - ожидает чего либо
Stopped(T) - остановлен
Zombit(Z) - завершился, но не передал код возврата. При завершение процесс становится зомби на какое-то время

signal - общение между процессами
	
& в конце команды - запустить в фоновом режиме
python simple_app.py 1 > /dev/null & - перенаправить поток вывода(stdout) в никуда
jobs - текущие процессы
kill PID или %номер - убивает процесс
3 потока stdin(0), stdout(1), stderr(2) - ввод, вывод, ошибки
python simple_app.py 2>/dev/null 1 > /dev/null & - перенаправить поток ошибок(stderror) в никуда и вывода(stdout) в никуда
ctrl+c - завершить процесс
ctrl+z - приостановить процесс
fg - начать приостановленный

команда1 && команда2 - выполнится вторая если первая выполнилась
команда1 || команда2 - выполнится вторая если первая провалилась
